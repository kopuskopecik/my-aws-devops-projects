AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Miliseconds Converter Website on EC2.
  This template deploys Miliseconds Converter Static Website on Amazon Linux 2
  (ami-09d95fab7fff3776c) EC2 Instance with custom security group 
  allowing http connections on port 80. Miliseconds Converter Static Website 
  is downloaded from Github repository, then deployed on Python Flask Web Application.
  Application Load Balancer with Auto Scaling Group of Amazon Linux 2 EC2 Instances within default VPC.

Parameters:
  MyVPCId:
    Description: My Default VPC ID
    Type: AWS::EC2::VPC::Id

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  
  MySubnets:
    Description: My Default Subnets
    Type: List<AWS::EC2::Subnet::Id>
  
  MyInstanceType:
    Description: Choose Instance Type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t1.micro
      - m1.small
      - m1.medium
      - m1.large
    ConstraintDescription: must be a valid EC2 instance type.
  PolicyTargetValue:
    Description: Please enter your Target value that triggers the Autoscaling
    Default: '60'
    Type: String
  
Mappings:
  RegionImageMap:
    us-east-1:
      AMI: ami-0c94855ba95c71c99
    us-east-2:
      AMI: ami-0603cbe34fd08cb81
    us-west-1:
      AMI: ami-0e65ed16c9bf1abc7
    us-west-2:
      AMI: ami-0841edc20334f9287
    eu-west-1:
      AMI: ami-08a2aed6e0a6f9c7d
  
Resources:
  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH and HTTP #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupName: !Ref MyVPCId

  DBInstance:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      DBName: phonebook
      Engine: MySQL
      EngineVersion: 8.0.16
      MasterUsername: admin
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      MasterUserPassword: clarusway-1
      VPCSecurityGroups:
        - !GetAtt MySecurityGroup.GroupId
  

  MyLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap 
          - RegionImageMap
          - !Ref AWS::Region
          - AMI
        InstanceType: !Ref MyInstanceType
        KeyName: !Ref KeyName
        SecurityGroups: 
          - !Ref MySecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              
              yum update -y
              yum install python3 -y 
              pip3 install flask
              pip3 install flask-mysql
              wget https://raw.githubusercontent.com/kopuskopecik/my-aws-devops-projects/master/aws/projects/004-phonebook-web-application/phonebook-app.py
              echo ${DBInstance.Endpoint.Address} | tee dbserver.endpoint
              mkdir ./templates
              cd ./templates
              wget https://raw.githubusercontent.com/kopuskopecik/my-aws-devops-projects/master/aws/projects/004-phonebook-web-application/templates/add-update.html
              wget https://raw.githubusercontent.com/kopuskopecik/my-aws-devops-projects/master/aws/projects/004-phonebook-web-application/templates/delete.html
              wget https://raw.githubusercontent.com/kopuskopecik/my-aws-devops-projects/master/aws/projects/004-phonebook-web-application/templates/index.html
              cd ..
              python3 phonebook-app.py
